package nikskul.dp;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

/*
–û—Ç—Ä—è–¥—É –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–µ—á—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Ä–∞–∑–º–µ—Ä–æ–º ùëö√óùëõ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.
–ü—É—Ç—å –ª–µ–∂–∏—Ç –∏–∑ –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π. –ü–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ø—Ä–∞–≤–æ –∏ –≤–Ω–∏–∑.
–ü–æ–ª–µ –Ω–µ—Ä–æ–≤–Ω–æ–µ, –Ω–æ —É –æ—Ç—Ä—è–¥–∞ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ —Å –≤—ã—Å–æ—Ç–∞–º–∏ –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞.
–û–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ —Å –≤—ã—Å–æ—Ç–∞–º–∏ ‚Ñé1 –∏ ‚Ñé2 –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ |‚Ñé2‚àí‚Ñé1|.
–û–±—â–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –≤—Å–µ—Ö –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
–ó–∞–¥–∞—á–∞ ‚Äî –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∏–∑ –∫–≤–∞–¥—Ä–∞—Ç–∞ (1,1) –≤ –∫–≤–∞–¥—Ä–∞—Ç (ùëö,ùëõ).

**–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**

–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞ ùëö –∏ ùëõ (1‚â§ùëö,ùëõ‚â§100) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–í —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω–æ –ø–æ ùëö —á–∏—Å–µ–ª.
–ö–∞–∂–¥–æ–µ —á–∏—Å–ª–æ ùëó –∏–∑ ùëñ-–π —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã—Å–æ—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–∞ (ùëñ,ùëó).
 –í—Å–µ –≤—ã—Å–æ—Ç—ã ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100.

**–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**

–í—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∏–∑ –∫–≤–∞–¥—Ä–∞—Ç–∞ (1,1) –≤ –∫–≤–∞–¥—Ä–∞—Ç (ùëö,ùëõ).

**–ü—Ä–∏–º–µ—Ä 1:**

–í—Ö–æ–¥:
```
2 2
1 1
1 1
```
–í—ã—Ö–æ–¥:
```
0
```

**–ü—Ä–∏–º–µ—Ä 2:**

–í—Ö–æ–¥:
```
4 2
1 2 3 5
3 8 4 7
```
–í—ã—Ö–æ–¥:
```
6
```
 */
public class FieldOfWar {
    public static void main(String[] args) throws IOException {
        try (
            var is = new BufferedReader(new InputStreamReader(
                new FileInputStream("input.txt")
                // System.in
            ));
            var pr = new PrintWriter(
                new FileOutputStream("output.txt")
                // System.out
            )
        ) {
            var st = new StringTokenizer(is.readLine());
            int m = Integer.parseInt(st.nextToken());
            int n = Integer.parseInt(st.nextToken());

            int[][] field = new int[n][m];
            for (int i = 0; i < n; i++) {
                st = new StringTokenizer(is.readLine());
                for (int j = 0; j < m; j++) {
                    field[i][j] = Integer.parseInt(st.nextToken());
                }
            }

            int[][] dp = new int[n][m];
            for (int i = 1; i < n; i++) {
                dp[i][0] = dp[i - 1][0] + Math.abs(field[i][0] - field[i - 1][0]);
            }
            for (int i = 1; i < m; i++) {
                dp[0][i] = dp[0][i - 1] + Math.abs(field[0][i] - field[0][i - 1]);
            }

            for (int row = 1; row < n; row++) {
                for (int col = 1; col < m; col++) {
                        dp[row][col] = Math.min(
                            dp[row-1][col] + Math.abs(field[row][col] - field[row-1][col]),
                            dp[row][col-1] + Math.abs(field[row][col] - field[row][col-1])
                        );
                }
            }

            pr.println(dp[n - 1][m - 1]);
        }
    }
}
