package nikskul.dp;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

/*
–ö—É–∑–Ω–µ—á–∏–∫

–ö—É–∑–Ω–µ—á–∏–∫ —Å–∏–¥–∏—Ç –ø–µ—Ä–µ–¥ –∫–ª–µ—Ç—á–∞—Ç–æ–π –ø–æ–ª–æ—Å–∫–æ–π –¥–ª–∏–Ω–æ–π ùëõ.
–í –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç,
–∫–æ—Ç–æ—Ä—ã–µ –∫—É–∑–Ω–µ—á–∏–∫ –ø–æ–ª—É—á–∏—Ç, –æ–∫–∞–∑–∞–≤—à–∏—Å—å –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ.
–û–Ω –º–æ–∂–µ—Ç –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–ª–µ—Ç–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –æ–¥–Ω—É.
–ó–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å –∫—É–∑–Ω–µ—á–∏–∫,
–µ—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–ª–µ—Ç–∫–µ.
–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —É–∫–∞–∑–∞–Ω–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùëõ (1 ‚â§ ùëõ ‚â§ 10^5) ‚Äî –¥–ª–∏–Ω–∞ –ø–æ–ª–æ—Å–∫–∏.

–í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∑–∞–ø–∏—Å–∞–Ω—ã ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
ùëéùëñ (‚àí10^9 ‚â§ ùëéùëñ ‚â§ 10^9) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –≤ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–µ.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–í—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å –∫—É–∑–Ω–µ—á–∏–∫.

–ü—Ä–∏–º–µ—Ä 1:

–í—Ö–æ–¥:
5
4 7 6 6 6

–í—ã—Ö–æ–¥:
29

–ü—Ä–∏–º–µ—Ä 2:

–í—Ö–æ–¥:
10
-4 -4 -5 -2 1 3 1 2 -4 -3

–í—ã—Ö–æ–¥:
-2
 */
public class Grasshopper {
    public static void main(String[] args) throws IOException {
        try (
            var is = new BufferedReader(new InputStreamReader(
                new FileInputStream("input.txt")
                // System.in
            ));
            var pr = new PrintWriter(
                new FileOutputStream("output.txt")
                // System.out
            )
        ) {
            var st = new StringTokenizer(is.readLine());
            int n = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(is.readLine());
            long[] dp = new long[n+1];
            for (int i = 1; i <= n; i++) {
                dp[i] = Integer.parseInt(st.nextToken());
            }

            for (int i = 2; i <= n; i++) {
                dp[i] = Math.max(dp[i-2], dp[i-1]) + dp[i];
            }

            pr.println(dp[n]);
        }
    }
}
