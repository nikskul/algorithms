package nikskul.dp;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.regex.Pattern;

/**
 * –ö—É–∑–Ω–µ—á–∏–∫
 *
 * –ö—É–∑–Ω–µ—á–∏–∫ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ –∫–ª–µ—Ç—á–∞—Ç–æ–π –¥–æ—Ä–æ–∂–∫–æ–π –¥–ª–∏–Ω–æ–π ùëõ.
 * –ö–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ –ª–∏–±–æ —Å–≤–æ–±–æ–¥–Ω–∞, –ª–∏–±–æ –∑–∞–Ω—è—Ç–∞.
 * –ö—É–∑–Ω–µ—á–∏–∫ –º–æ–∂–µ—Ç –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ 1, 2, ..., ùëò –∫–ª–µ—Ç–æ–∫ –≤–ø–µ—Ä–µ–¥.
 * –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏, —Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–Ω –º–æ–∂–µ—Ç –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–ª–µ—Ç–∫–∏,
 * –Ω–µ –ø—Ä–æ—Ö–æ–¥—è —á–µ—Ä–µ–∑ –∑–∞–Ω—è—Ç—ã–µ.
 *
 * **–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**
 *
 * –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞ ùëõ –∏ ùëò (1 ‚â§ ùëò ‚â§ ùëõ ‚â§ 5 ‚ãÖ 10^5).
 *
 * –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω—ã ùëõ, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü.
 * –ù–æ–ª—å ‚Äî —Å–≤–æ–±–æ–¥–Ω–∞—è –∫–ª–µ—Ç–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ ‚Äî –∑–∞–Ω—è—Ç–∞—è.
 *
 * **–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**
 *
 * –í—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–ª–µ—Ç–∫–∏.
 * –í—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ –º–æ–¥—É–ª—é 10^9 + 7.
 *
 * **–ü—Ä–∏–º–µ—Ä—ã**
 *
 * **–ü—Ä–∏–º–µ—Ä 1:**
 *
 * –í—Ö–æ–¥:
 * 8 3
 * 01100010
 *
 * –í—ã—Ö–æ–¥:
 * 3
 *
 * **–ü—Ä–∏–º–µ—Ä 2:**
 *
 * –í—Ö–æ–¥:
 * 8 3
 * 00000001
 *
 * –í—ã—Ö–æ–¥:
 * 0
 *
 * **–ü—Ä–∏–º–µ—Ä 3:**
 *
 * –í—Ö–æ–¥:
 * 8 4
 * 00111000
 *
 * –í—ã—Ö–æ–¥:
 * 4
 */
public class GrasshopperSlidingWindow {

    static final long MOD = (long) (1e9 + 7);

    public static void main(String[] args) throws IOException {
        try (
            var is = new BufferedReader(new InputStreamReader(
                new FileInputStream("input.txt")
                // System.in
            ));
            var pr = new PrintWriter(
                new FileOutputStream("output.txt")
                // System.out
            )
        ) {
            var st = new StringTokenizer(is.readLine());
            int n = Integer.parseInt(st.nextToken());
            int k = Integer.parseInt(st.nextToken());

            var matcher = Pattern.compile("\\d").matcher(is.readLine());

            long[] s = new long[n + k + 1];
            long[] dp = new long[n + k + 1];
            s[k-1] = 0;
            dp[k] = 1;
            for (int i = k; i < n+k; i++) {
                matcher.find();
                s[i] = s[i-1] + dp[i];
                if (matcher.group().equals("0")) {
                    dp[i + 1] = s[i] - s[i - k];
                }
            }

            pr.println(dp[n+k]);
        }
    }
}
